..:: funzioni utili ::..

1. zip prende due liste [x_i] e [y_i] e produce una lista i cui elementi sono le coppie di elementi
   cioe' da' [(x_i, y_i)]

2. zipWith fa prende le due liste e le unisce con una funzione => da' [f(x_i,y_i)]

3. map applica una funzione a ciascun elemento di una lista, restituendo la lista con gli output:
   da' [f(x_i)]

4. ++ concatena due liste (anche le stringhe sono liste)

5. putStrLn, putStr, print sono tutte funzioni per printare sul terminale

6. show trasforma un dato che non ha tipo string in una stringa (se il tipo lo permette)



..:: notazioni utili ::..

1. non esistono le variabili in un linguaggio puramente funzionale. TUTTO e' fatto solo di funzioni.
   (no worries, e' possibile emulare la programmazione procedurale con l'aiuto delle monadi
   e in particolare la State Monad, che pero' qua non serve)

2. le function signature assomigliano molto a una scrittura matematica:
   f :: a -> b         prende un argomento di tipo a e restituisce un tipo b
   g :: a -> b -> c    prende un argomento di tipo a e un argomento di tipo b e restituisce un tipo c

3. se hai una funzione f(x,y,z), la si chiama senza parentesi e virgole:
   f x y z

4: il punto '.' e' la composizione di funzioni:
   f :: a -> b,  g :: b -> c     =>   g . f :: a -> c

5. il carattere $ e' praticamente un sostituto delle parentesi perche' modifica l'ordine di
   evaluation di un'espressione (leggilo come "valuta prima l'espressione che sta alla destra
   di $ fino alla fine" (cioe' fino alla prossima parentesi, che ha una precedenza piu' forte)
   
   perche' haskell si confonde se hai una cosa tipo `someFunction x + 2`, non sempre sa cosa eseguire tra
   `(someFunction x) + 2` oppure `someFunction (x + 2)`. 

   => per evitare le parentesi che spesso possono appesantire troppo la lettura, scrivi
      `someFunction $ x + 2`, e se questa espressione sta in una parentesi piu' grande, il $ valutera'
      tutto solo fino alla parentesi che racchiude l'espressione in cui si trova.

6. se una funzione e' chiamata senza l'ultimo argomento, allora sta implicitamente creando una nuova funzione
   che prende un solo argomento e restituisce la funzione originale valutata negli argomenti gia' passati e nell'ultimo argomento.
   Cosi' via se manca ANCHE il penultimo argomento, e poi per il terzultimo etc...

   Questo meccanismo si chiama function currying, o partial function application, e la funzione originale si chiama
   higher order function rispetto alle "funzioni parziali"

   Questo si legge molto bene nelle function signatures: ogni argomento e' in realta' l'output di una funzione
   che prende gli argomenti precedenti, e questo output e' in realta' a sua volta una funzione che prende dei
   parametri. L'ultimo tipo di output e' il "vero" output nel senso procedurale della programmazione.

   ES: `zipWith (*) xs ys` prende le due liste xs = [x_i] e ys = [y_i] e restituisce una lista i cui elementi sono
       la funzione * applicata agli argomenti x_i e y_i
       => [x_i * y_i]

       pensa all'operazione * come una funzione * :: a -> a -> a, usata in una notazione particolare per cui
       la funzione e' un "infix", cioe' viene chiamata in mezzo ai suoi due argomenti

7. nell'implementazione (binding) di una funzione, avviene di fatto un pattern match, in cui ogni argomento e'
   matchato con un suo costruttore. I tipi semplici (i Float sono usati ovunque nel codice) hanno un unico costrutture implicito,
   quindi nell'implementazione di f :: Float -> Float puoi usare direttamente il nome che dai all'argomento:

     f :: Float -> Float
	 f x = x ** 2

   Molti tipi pero' hanno dei costruttori alternativi, tipo una lista. Una lista viene viene costruita tecnicamente
   con i due punti ':', che possono indicare due cose: un elemento seguito da un altro elemento, oppure un elemento
   seguito da un'altra lista.

	f :: [Float] -> Float
	f [] = ...                <- matcha una lista vuota
	f (x1:x2:[]) = ...        <- matcha una lista fatta da due elementi seguiti da una lista vuota (cioe' due elementi e basta)
	f (x:xs) = ...            <- matcha una lista con un elemento x, poi il resto (potrebbe anche essere []) lo mette in xs
	f (x:_) = ...             <- uguale al precedente

   Il costrutture underscore accetta qualsiasi cosa e la ignora, quindi ogni volta che una funzione deve matchare un argomento
   contro piu' di un costruttore ma alcuni "edge case" si volgiono ignorare, e' utile mettere come ultimo caso
   un caso in cui si matcha contro underscore, che quindi agisce come un caso super generico (in cui mettiamo un
   "valore errore" in questo programma) che verra' chiamato quando tutti gli altri pattern precedenti non matchano



..:: sintassi utile ::..

1. 'where' specifica i simboli che compaiono nell'espressione precedente

2. 'let ... in ...' specifica (nel blocco let) i simboli che compaiono nel blocco in

3. 'let' da solo si usa nei "do block" che sono l'emulazione della programmazione procedurale
   nelle IO actions (in generale e' un operatore su una monade che permette di estrarre il risultato
   di un'espressione che agisce su una monade)

4. (\ ... -> ...) e' una lambda function (il \ dovrebbe rappresentare la stanga di una lambda... oh boy):
   dopo il \ si mettono i nomi degli argomenti e dopo la -> si mette l'espressione che viene valutata come funzione

5. `case ... of ...` e' l'equivalente di uno switch statemente in c++, guarda il valore che ha l'esressione nel blocco case,
   e valuta l'espressione che corrisponde al caso
